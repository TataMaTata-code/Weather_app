//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `CloudsParticle.sks`.
    static let cloudsParticleSks = Rswift.FileResource(bundle: R.hostingBundle, name: "CloudsParticle", pathExtension: "sks")
    /// Resource file `FogParticle.sks`.
    static let fogParticleSks = Rswift.FileResource(bundle: R.hostingBundle, name: "FogParticle", pathExtension: "sks")
    /// Resource file `OvercastParticle.sks`.
    static let overcastParticleSks = Rswift.FileResource(bundle: R.hostingBundle, name: "OvercastParticle", pathExtension: "sks")
    /// Resource file `RainParticle.sks`.
    static let rainParticleSks = Rswift.FileResource(bundle: R.hostingBundle, name: "RainParticle", pathExtension: "sks")
    /// Resource file `SnowParticle.sks`.
    static let snowParticleSks = Rswift.FileResource(bundle: R.hostingBundle, name: "SnowParticle", pathExtension: "sks")
    /// Resource file `StarsParticle.sks`.
    static let starsParticleSks = Rswift.FileResource(bundle: R.hostingBundle, name: "StarsParticle", pathExtension: "sks")
    /// Resource file `SunParticle.sks`.
    static let sunParticleSks = Rswift.FileResource(bundle: R.hostingBundle, name: "SunParticle", pathExtension: "sks")

    /// `bundle.url(forResource: "CloudsParticle", withExtension: "sks")`
    static func cloudsParticleSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cloudsParticleSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FogParticle", withExtension: "sks")`
    static func fogParticleSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fogParticleSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OvercastParticle", withExtension: "sks")`
    static func overcastParticleSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.overcastParticleSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RainParticle", withExtension: "sks")`
    static func rainParticleSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rainParticleSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SnowParticle", withExtension: "sks")`
    static func snowParticleSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.snowParticleSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "StarsParticle", withExtension: "sks")`
    static func starsParticleSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.starsParticleSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SunParticle", withExtension: "sks")`
    static func sunParticleSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sunParticleSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `bokeh`.
    static let bokeh = Rswift.ImageResource(bundle: R.hostingBundle, name: "bokeh")
    /// Image `cloud_058`.
    static let cloud_058 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloud_058")
    /// Image `clouds1`.
    static let clouds1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "clouds1")
    /// Image `clouds`.
    static let clouds = Rswift.ImageResource(bundle: R.hostingBundle, name: "clouds")
    /// Image `cloudss`.
    static let cloudss = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloudss")
    /// Image `cloudssss`.
    static let cloudssss = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloudssss")
    /// Image `newsun`.
    static let newsun = Rswift.ImageResource(bundle: R.hostingBundle, name: "newsun")
    /// Image `overcast`.
    static let overcast = Rswift.ImageResource(bundle: R.hostingBundle, name: "overcast")
    /// Image `smoke`.
    static let smoke = Rswift.ImageResource(bundle: R.hostingBundle, name: "smoke")
    /// Image `spark`.
    static let spark = Rswift.ImageResource(bundle: R.hostingBundle, name: "spark")
    /// Image `sun.custom.ph12`.
    static let sunCustomPh12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sun.custom.ph12")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bokeh", bundle: ..., traitCollection: ...)`
    static func bokeh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bokeh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloud_058", bundle: ..., traitCollection: ...)`
    static func cloud_058(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloud_058, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clouds", bundle: ..., traitCollection: ...)`
    static func clouds(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clouds, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clouds1", bundle: ..., traitCollection: ...)`
    static func clouds1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clouds1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloudss", bundle: ..., traitCollection: ...)`
    static func cloudss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloudss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloudssss", bundle: ..., traitCollection: ...)`
    static func cloudssss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloudssss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "newsun", bundle: ..., traitCollection: ...)`
    static func newsun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newsun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "overcast", bundle: ..., traitCollection: ...)`
    static func overcast(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.overcast, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smoke", bundle: ..., traitCollection: ...)`
    static func smoke(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smoke, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "spark", bundle: ..., traitCollection: ...)`
    static func spark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sun.custom.ph12", bundle: ..., traitCollection: ...)`
    static func sunCustomPh12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sunCustomPh12, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `CurrentLocationTableViewCell`.
    static let currentLocationTableViewCell = _R.nib._CurrentLocationTableViewCell()
    /// Nib `CurrentWeatherTableViewCell`.
    static let currentWeatherTableViewCell = _R.nib._CurrentWeatherTableViewCell()
    /// Nib `DailyWeatherTableViewCell`.
    static let dailyWeatherTableViewCell = _R.nib._DailyWeatherTableViewCell()
    /// Nib `WeatherHourlyTableViewCell`.
    static let weatherHourlyTableViewCell = _R.nib._WeatherHourlyTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CurrentLocationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.currentLocationTableViewCell) instead")
    static func currentLocationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.currentLocationTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CurrentWeatherTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.currentWeatherTableViewCell) instead")
    static func currentWeatherTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.currentWeatherTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DailyWeatherTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dailyWeatherTableViewCell) instead")
    static func dailyWeatherTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dailyWeatherTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WeatherHourlyTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weatherHourlyTableViewCell) instead")
    static func weatherHourlyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weatherHourlyTableViewCell)
    }
    #endif

    static func currentLocationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrentLocationTableViewCell? {
      return R.nib.currentLocationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrentLocationTableViewCell
    }

    static func currentWeatherTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrentWeatherTableViewCell? {
      return R.nib.currentWeatherTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrentWeatherTableViewCell
    }

    static func dailyWeatherTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DailyWeatherTableViewCell? {
      return R.nib.dailyWeatherTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DailyWeatherTableViewCell
    }

    static func weatherHourlyTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeatherHourlyTableViewCell? {
      return R.nib.weatherHourlyTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeatherHourlyTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `WeatherHourlyTableViewCell`.
    static let weatherHourlyTableViewCell: Rswift.ReuseIdentifier<WeatherHourlyTableViewCell> = Rswift.ReuseIdentifier(identifier: "WeatherHourlyTableViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 8 localization keys.
    struct localizable {
      /// en translation: Current location
      ///
      /// Locales: ru, en
      static let locationLabelText = Rswift.StringResource(key: "locationLabel.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Enable to find city
      ///
      /// Locales: ru, en
      static let alertForSearcherTitle = Rswift.StringResource(key: "alertForSearcher.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Fells like: 
      ///
      /// Locales: ru, en
      static let feelsLikeLabelText = Rswift.StringResource(key: "feelsLikeLabel.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: No current weather information available
      ///
      /// Locales: ru, en
      static let alertForMainMessage = Rswift.StringResource(key: "alertForMain.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: No internet connection
      ///
      /// Locales: ru, en
      static let alertForMainTitle = Rswift.StringResource(key: "alertForMain.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: ru, en
      static let searcherPlaceholder = Rswift.StringResource(key: "searcher.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: There is no internet connection or the city does not exist
      ///
      /// Locales: ru, en
      static let alertForSearcherMessage = Rswift.StringResource(key: "alertForSearcher.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// en translation: Today
      ///
      /// Locales: ru, en
      static let dayToday = Rswift.StringResource(key: "day.today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)

      /// en translation: Current location
      ///
      /// Locales: ru, en
      static func locationLabelText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("locationLabel.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "locationLabel.text"
        }

        return NSLocalizedString("locationLabel.text", bundle: bundle, comment: "")
      }

      /// en translation: Enable to find city
      ///
      /// Locales: ru, en
      static func alertForSearcherTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alertForSearcher.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alertForSearcher.title"
        }

        return NSLocalizedString("alertForSearcher.title", bundle: bundle, comment: "")
      }

      /// en translation: Fells like: 
      ///
      /// Locales: ru, en
      static func feelsLikeLabelText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("feelsLikeLabel.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "feelsLikeLabel.text"
        }

        return NSLocalizedString("feelsLikeLabel.text", bundle: bundle, comment: "")
      }

      /// en translation: No current weather information available
      ///
      /// Locales: ru, en
      static func alertForMainMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alertForMain.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alertForMain.message"
        }

        return NSLocalizedString("alertForMain.message", bundle: bundle, comment: "")
      }

      /// en translation: No internet connection
      ///
      /// Locales: ru, en
      static func alertForMainTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alertForMain.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alertForMain.title"
        }

        return NSLocalizedString("alertForMain.title", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: ru, en
      static func searcherPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("searcher.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "searcher.placeholder"
        }

        return NSLocalizedString("searcher.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: There is no internet connection or the city does not exist
      ///
      /// Locales: ru, en
      static func alertForSearcherMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alertForSearcher.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alertForSearcher.message"
        }

        return NSLocalizedString("alertForSearcher.message", bundle: bundle, comment: "")
      }

      /// en translation: Today
      ///
      /// Locales: ru, en
      static func dayToday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("day.today", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "day.today"
        }

        return NSLocalizedString("day.today", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 1 localization keys.
    struct main {
      /// ru translation: Search
      ///
      /// Locales: ru
      static let pdW4eQ8XPlaceholder = Rswift.StringResource(key: "pdW-4e-q8X.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)

      /// ru translation: Search
      ///
      /// Locales: ru
      static func pdW4eQ8XPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pdW-4e-q8X.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pdW-4e-q8X.placeholder"
        }

        return NSLocalizedString("pdW-4e-q8X.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _CurrentLocationTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CurrentLocationTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrentLocationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrentLocationTableViewCell
      }

      fileprivate init() {}
    }

    struct _CurrentWeatherTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CurrentWeatherTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrentWeatherTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrentWeatherTableViewCell
      }

      fileprivate init() {}
    }

    struct _DailyWeatherTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DailyWeatherTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DailyWeatherTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DailyWeatherTableViewCell
      }

      fileprivate init() {}
    }

    struct _WeatherHourlyTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WeatherHourlyTableViewCell

      let bundle = R.hostingBundle
      let identifier = "WeatherHourlyTableViewCell"
      let name = "WeatherHourlyTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeatherHourlyTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeatherHourlyTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"
      let searcherViewController = StoryboardViewControllerResource<SearcherViewController>(identifier: "SearcherViewController")

      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }

      func searcherViewController(_: Void = ()) -> SearcherViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searcherViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
        if _R.storyboard.main().searcherViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searcherViewController' could not be loaded from storyboard 'Main' as 'SearcherViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
